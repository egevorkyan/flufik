package badgerdb

import (
	//"github.com/egevorkyan/flufik/crypto"
	"fmt"
	"testing"
)

const b64 = ``

func TestFlufikBadger_UpdateDb(t *testing.T) {
	var kv = make(map[string]string)
	kv["demo_priv"] = b64
	kv["demo_pub"] = "test"
	kv["demo_pwd"] = "demo"
	db := NewFlufikBadgerDB("test")
	if err := db.UpdateDb(kv); err != nil {
		t.Fatal(err)
	}
}

func TestFlufikBadger_Get(t *testing.T) {
	var buffer [][]byte
	data := []string{"demo_priv", "demo_pub", "demo_pwd"}
	db := NewFlufikBadgerDB("test")
	for _, d := range data {
		temp, err := db.Get(d)
		if err != nil {
			t.Fatal(err)
		}
		buffer = append(buffer, temp)
	}
	for _, b := range buffer {
		fmt.Println(string(b))
	}
	defer db.badgerDB.Close()

}
